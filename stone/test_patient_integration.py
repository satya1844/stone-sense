#!/usr/bin/env python3
"""
Comprehensive test script for the patient management system integration
"""

import requests
import json
import os
from PIL import Image
import io

# Configuration
FLASK_URL = "http://localhost:5000"
NEXTJS_URL = "http://localhost:3000"

def test_patient_registration():
    """Test patient registration endpoint"""
    print("=== Testing Patient Registration ===")
    
    patient_data = {
        "first_name": "John",
        "last_name": "Doe", 
        "email": "john.doe@test.com",
        "phone": "123-456-7890",
        "date_of_birth": "1980-01-15",
        "gender": "Male",
        "address": "123 Test Street, Test City, TC 12345",
        "medical_history": "No significant medical history",
        "allergies": "None",
        "current_medications": "None",
        "emergency_contact_name": "Jane Doe",
        "emergency_contact_phone": "098-765-4321",
        "previous_kidney_stones": "None"
    }
    
    try:
        response = requests.post(f"{FLASK_URL}/register-patient", json=patient_data)
        if response.status_code == 200:
            result = response.json()
            print(f"✅ Patient registered successfully with ID: {result['patient_id']}")
            return result['patient_id']
        else:
            print(f"❌ Registration failed: {response.text}")
            return None
    except Exception as e:
        print(f"❌ Registration error: {e}")
        return None

def test_patient_search(email):
    """Test patient search endpoint"""
    print("=== Testing Patient Search ===")
    
    try:
        response = requests.get(f"{FLASK_URL}/search-patients?query={email}&type=email")
        if response.status_code == 200:
            result = response.json()
            if result['patients']:
                print(f"✅ Found {len(result['patients'])} patient(s)")
                return result['patients'][0]['patient_id']
            else:
                print("❌ No patients found")
                return None
        else:
            print(f"❌ Search failed: {response.text}")
            return None
    except Exception as e:
        print(f"❌ Search error: {e}")
        return None

def test_patient_lookup(patient_id):
    """Test patient lookup endpoint"""
    print("=== Testing Patient Lookup ===")
    
    try:
        response = requests.get(f"{FLASK_URL}/get-patient/{patient_id}")
        if response.status_code == 200:
            result = response.json()
            patient = result['patient']
            print(f"✅ Patient found: {patient['first_name']} {patient['last_name']}")
            return patient
        else:
            print(f"❌ Lookup failed: {response.text}")
            return None
    except Exception as e:
        print(f"❌ Lookup error: {e}")
        return None

def create_test_image():
    """Create a test image for stone detection"""
    print("=== Creating Test Image ===")
    
    # Create a simple test image (200x200 gray image)
    img = Image.new('RGB', (200, 200), color='gray')
    
    # Save to bytes
    img_bytes = io.BytesIO()
    img.save(img_bytes, format='PNG')
    img_bytes.seek(0)
    
    print("✅ Test image created")
    return img_bytes

def test_stone_detection_with_patient(patient_id):
    """Test stone detection with patient information"""
    print("=== Testing Stone Detection with Patient ===")
    
    # Create test image
    img_bytes = create_test_image()
    
    try:
        files = {'image': ('test_image.png', img_bytes, 'image/png')}
        data = {'patient_id': patient_id}
        
        response = requests.post(f"{FLASK_URL}/predict", files=files, data=data)
        
        if response.status_code == 200:
            result = response.json()
            print(f"✅ Detection completed successfully")
            print(f"   Stones detected: {result['summary']['total_stones']}")
            print(f"   Risk level: {result['summary']['risk_level']}")
            return result
        else:
            print(f"❌ Detection failed: {response.text}")
            return None
    except Exception as e:
        print(f"❌ Detection error: {e}")
        return None

def test_report_generation(patient_id, detection_result):
    """Test PDF report generation with patient data"""
    print("=== Testing Report Generation ===")
    
    try:
        report_data = {
            'patient_id': patient_id,
            'detection_result': detection_result,
            'doctor_notes': 'Test report generated by automated testing system'
        }
        
        response = requests.post(f"{FLASK_URL}/generate-report", json=report_data)
        
        if response.status_code == 200:
            # Save the PDF response
            with open('test_report.pdf', 'wb') as f:
                f.write(response.content)
            print("✅ Report generated successfully: test_report.pdf")
            return True
        else:
            print(f"❌ Report generation failed: {response.text}")
            return False
    except Exception as e:
        print(f"❌ Report generation error: {e}")
        return False

def main():
    """Run comprehensive tests"""
    print("🚀 Starting Comprehensive Patient Management Tests\n")
    
    # Test 1: Register a new patient
    patient_id = test_patient_registration()
    if not patient_id:
        print("❌ Testing stopped due to registration failure")
        return
    
    print()
    
    # Test 2: Search for the patient
    found_patient_id = test_patient_search("john.doe@test.com")
    if not found_patient_id:
        print("❌ Testing stopped due to search failure")
        return
    
    print()
    
    # Test 3: Lookup patient details
    patient_data = test_patient_lookup(patient_id)
    if not patient_data:
        print("❌ Testing stopped due to lookup failure")
        return
    
    print()
    
    # Test 4: Stone detection with patient
    detection_result = test_stone_detection_with_patient(patient_id)
    if not detection_result:
        print("❌ Testing stopped due to detection failure")
        return
    
    print()
    
    # Test 5: Generate report with patient data
    report_success = test_report_generation(patient_id, detection_result)
    
    print("\n" + "="*50)
    if report_success:
        print("🎉 ALL TESTS PASSED SUCCESSFULLY!")
        print(f"✅ Patient ID: {patient_id}")
        print("✅ Patient registration working")
        print("✅ Patient search working") 
        print("✅ Patient lookup working")
        print("✅ Stone detection with patient working")
        print("✅ Report generation with patient data working")
    else:
        print("⚠️  SOME TESTS FAILED")
    print("="*50)

if __name__ == "__main__":
    main()